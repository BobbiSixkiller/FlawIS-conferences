# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @key(fields: String!) on INTERFACE | OBJECT

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

type Address {
  city: String!
  country: String!
  postal: String!
  street: String!
}

input AddressInput {
  city: String!
  country: String!
  postal: String!
  street: String!
}

"""Attendee model type"""
type Attendee {
  conference: Conference!
  createdAt: DateTime!
  id: ID!
  invoice: Invoice!
  submissions: [Submission!]
  updatedAt: DateTime!
  user: User!
}

input AttendeeInput {
  conferenceId: ObjectId!
  ticketId: ObjectId!
}

"""Billing information"""
type Billing {
  DIC: String!
  IBAN: String
  ICDPH: String!
  ICO: String!
  SWIFT: String
  address: Address!
  id: ID
  name: String!
}

input BillingInput {
  DIC: String!
  IBAN: String
  ICDPH: String!
  ICO: String!
  SWIFT: String
  address: AddressInput!
  name: String!
}

"""Conference model type"""
type Conference {
  createdAt: DateTime!
  description: String!
  end: DateTime
  host: Host
  id: ObjectId!
  logoUrl: String!
  name: String!
  regStart: DateTime
  sections: [Section!]!
  start: DateTime
  tickets: [Ticket!]!
  updatedAt: DateTime!
  venue: Venue
}

input ConferenceInput {
  description: String!
  end: DateTime
  host: HostInput
  logoUrl: String!
  name: String!
  regStart: DateTime
  start: DateTime
  tickets: TicketInput
  venue: VenueInput
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""Conference hosting organization"""
type Host {
  billing: Billing!
  logoUrl: String!
  stampUrl: String!
}

input HostInput {
  billing: BillingInput!
  logoUrl: String!
  stampUrl: String!
}

"""Invoice entity subdocument type"""
type Invoice {
  invoice: InvoiceData!
  issuer: Host!
  payer: Billing!
}

"""The body of an invoice"""
type InvoiceData {
  body: String!
  comment: String!
  dueDate: DateTime!
  issueDate: DateTime!
  ticketPrice: Int!
  type: String!
  variableSymbol: String!
  vat: Int!
  vatDate: DateTime!
}

"""Language code"""
type Language {
  code: String!
}

"""Language input"""
input LanguageInput {
  code: String!
}

type Mutation {
  addAttendee(data: AttendeeInput!): Attendee!
  createConference(data: ConferenceInput!): Conference!
  createSection(data: SectionInput!): Section!
  updateConference(data: ConferenceInput!, id: ObjectId!): Conference!
  updateSection(data: SectionInput!, id: ObjectId!): Section!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Query {
  attendees: [Attendee!]!
  conference(id: ObjectId!): Conference!
  conferences: [Conference!]!
  section(id: ObjectId!): Section!
  upcomingConferences: [Conference!]!
}

"""Conference's section entity model type"""
type Section {
  conference: String!
  createdAt: DateTime!
  description: String!
  id: ObjectId!
  languages: [Language!]!
  name: String!
  submissions: [Submission!]!
  updatedAt: DateTime!
}

"""Conference section input type"""
input SectionInput {
  conference: String!
  description: String!
  languages: [LanguageInput!]!
  name: String!
}

"""The submissions's review process status"""
enum Status {
  Accepted
  Rejected
  Reviewing
}

"""Submission entity model type"""
type Submission {
  abstract: String!
  authors: [User!]!
  conference: Conference!
  createdAt: DateTime!
  id: ID!
  keywords: [String!]!
  name: String!
  section: Section!
  status: Status!
  submissionUrl: String
  updatedAt: DateTime!
}

"""Conference ticket type"""
type Ticket {
  description: String!
  id: ObjectId!
  name: String!
  online: Boolean!
  price: Int!
  withSubmission: Boolean!
}

input TicketInput {
  description: String!
  name: String!
  online: Boolean!
  price: Int!
  withSubmission: Boolean!
}

"""User reference type from users microservice"""
type User {
  email: String!
  id: ID!
  online: Boolean!
  withSubmission: Boolean!
}

"""Venue that conference takes place in"""
type Venue {
  address: Address!
  name: String!
}

input VenueInput {
  address: AddressInput!
  name: String!
}
